# Generated by Django 4.2 on 2023-07-09 15:35

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Episode',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('episode_number', models.IntegerField(blank=True, default=0, null=True)),
                ('created_on', models.DateTimeField(auto_now_add=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Movie',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('dmca', models.CharField(default='000000', max_length=6, null=True)),
                ('source_link', models.CharField(blank=True, max_length=512, null=True)),
                ('generated', models.BooleanField(default=False)),
                ('adult', models.BooleanField(default=False)),
                ('title', models.CharField(blank=True, max_length=255, null=True)),
                ('original_title', models.CharField(blank=True, max_length=255, null=True)),
                ('runtime', models.IntegerField(blank=True, default=0, null=True)),
                ('overview', models.TextField(blank=True, null=True)),
                ('countries', models.CharField(blank=True, max_length=255, null=True)),
                ('release_date', models.DateField(blank=True, null=True)),
                ('poster_path', models.CharField(blank=True, max_length=255, null=True)),
                ('backdrop_path', models.CharField(blank=True, max_length=255, null=True)),
                ('original_language', models.CharField(blank=True, max_length=10, null=True)),
                ('popularity', models.FloatField(blank=True, null=True)),
                ('vote_count', models.PositiveIntegerField(blank=True, null=True)),
                ('vote_average', models.FloatField(blank=True, null=True)),
                ('budget', models.FloatField(blank=True, default=0, null=True)),
                ('revenue', models.FloatField(blank=True, default=0, null=True)),
                ('quality', models.CharField(blank=True, max_length=255, null=True)),
                ('created_on', models.DateTimeField(auto_now_add=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Person',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('name', models.CharField(blank=True, max_length=255, null=True)),
                ('gender', models.IntegerField(default=1, null=True)),
                ('popularity', models.FloatField(default=1, null=True)),
                ('profile_path', models.CharField(blank=True, max_length=255, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Platform',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, default='papystreaming', max_length=255, null=True)),
                ('domain_name', models.CharField(blank=True, default='papystreaming.vip', max_length=255, null=True)),
                ('url', models.CharField(blank=True, default='https://wvw.papystreaming.vip/', max_length=255, null=True)),
                ('title', models.CharField(blank=True, default='papystreaming film streaming et série streaming gratuit', max_length=255, null=True)),
                ('keywords', models.TextField(blank=True, default='film streaming, streaming, film, série streaming, papystreaming, du streaming, streamcomplet, stream complet', null=True)),
                ('meta_description', models.TextField(blank=True, default='papystreaming site du films et séries français, Film streaming et série streaming gratuit en vf 2021, Série streaming complet HD fr.', null=True)),
                ('description', models.TextField(blank=True, default='papystreaming Venez découvrir un site de streaming Papystreaming qui vous propose tout les derniers films complet et serie streaming complet en exclue et en streaming longue durée sans limitation en vf et vostfr. Vous êtes à deux clics de ne plus pourvoir vous passer de notre site de films en streaming.', null=True)),
                ('footer_description', models.TextField(blank=True, default="Le Seul Site De Film Streaming En Hd 720p, Full Hd 1020p, Uh 4k Regardez Sans Limite Tous Les Films Et Séries Que Vous Desirez En Streaming Hd Sur (Papystreaming). Le Site N°1 Pour Voir Les Derniers Films Et Series En Streaming Vf Gratuitement, Sans Inscription Et Sans Pub. Visitez Notre Site De Streaming Maintenant Pour Retrouver Notre Collection Des Films Et Séries. Voir Votre Film En Français Préféré En Stream Complet. Du Grand Cinéma Classique Au Film D'auteur Contemporain, Regarder Les Meilleurs Films En Version Française.", null=True)),
                ('tag', models.TextField(blank=True, default='PapyStreaming Voir Film Site de streaming PapyStreaming VF Film streaming Regarder StreamingVF.', null=True)),
                ('theme_color', models.CharField(blank=True, default='#4b57fc', max_length=255, null=True)),
                ('background_color', models.CharField(blank=True, default='#111113', max_length=255, null=True)),
                ('background_path', models.CharField(blank=True, default='/static/img/background.jpg', max_length=255, null=True)),
                ('logo_path', models.CharField(blank=True, default='/static/img/logo.png', max_length=255, null=True)),
                ('dmca', models.TextField(blank=True, default='\n<br>\nPapyStreaming .forum respecte la propriété intellectuelle d\'autrui et prend les questions de propriété intellectuelle très au sérieux et s’engage à répondre aux besoins des propriétaires de contenu tout en les aidant à gérer la publication de leur contenu en ligne.\n<br>\n<br>\nSi vous pensez que votre travail protégé par un droit d\'auteur a été copié de manière à constituer une violation du droit d\'auteur et qu\'il est accessible sur ce site, vous pouvez en informer notre agent des droits d\'auteur, comme indiqué dans la loi DMCA (Digital Millennium Copyright Act of 1998). Pour que votre réclamation soit valide en vertu de la DMCA, vous devez fournir les informations suivantes lors de l\'envoi d\'un avis d\'infraction au droit d\'auteur:\n<br>\n<br>\nSignature physique ou électronique d\'une personne autorisée à agir au nom du titulaire du droit d\'auteur Identification de l\'œuvre protégée qui aurait été violée\n<br>\n<br>\nIdentification du matériel présumé contrefaisant ou faisant l\'objet de l\'activité illicite et devant être enlevé\n<br>\n<br>\nInformations raisonnablement suffisantes pour permettre au fournisseur de services de contacter la partie plaignante, telles qu\'une adresse, un numéro de téléphone et, le cas échéant, une adresse de courrier électronique\n<br>\n<br>\nUne déclaration indiquant que la partie plaignante "croit de bonne foi que l\'utilisation du matériel de la manière incriminée n\'est pas autorisée par le titulaire du droit d\'auteur, son mandataire ou la loi"\n<br>\n<br>\nUne déclaration selon laquelle "les informations figurant dans la notification sont exactes" et "sous peine de parjure, la partie plaignante est autorisée à agir au nom du titulaire d\'un droit exclusif prétendument violé"\n<br>\n<br>\nLes informations ci-dessus doivent être envoyées par notification écrite, télécopiée ou par courrier électronique à l\'agent désigné suivant:\n<br>\n<br>\nAttention: bureau DMCA\n<br>\n<br>\nContactez nous:\n<br>\n<br>\nsapystreamingdmca@gmail.com\n<br>\n<br>\nCes informations ne doivent pas être interprétées comme des conseils juridiques. Pour plus d\'informations sur les informations requises pour les notifications DMCA valides, voir 17 États-Unis d\'Amérique. 512 (c) (3).        ', null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Serie',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('dmca', models.CharField(default='000000', max_length=6, null=True)),
                ('source_link', models.CharField(blank=True, max_length=512, null=True)),
                ('generated', models.BooleanField(default=False)),
                ('adult', models.BooleanField(default=False)),
                ('in_production', models.BooleanField(default=False)),
                ('title', models.CharField(blank=True, max_length=255, null=True)),
                ('original_title', models.CharField(blank=True, max_length=255, null=True)),
                ('runtime', models.IntegerField(blank=True, default=0, null=True)),
                ('overview', models.TextField(blank=True, null=True)),
                ('countries', models.CharField(blank=True, max_length=255, null=True)),
                ('release_date', models.DateField(blank=True, null=True)),
                ('poster_path', models.CharField(blank=True, max_length=255, null=True)),
                ('backdrop_path', models.CharField(blank=True, max_length=255, null=True)),
                ('original_language', models.CharField(blank=True, max_length=10, null=True)),
                ('popularity', models.FloatField(blank=True, null=True)),
                ('vote_count', models.PositiveIntegerField(blank=True, null=True)),
                ('vote_average', models.FloatField(blank=True, null=True)),
                ('number_of_seasons', models.IntegerField(blank=True, default=0, null=True)),
                ('number_of_episodes', models.IntegerField(blank=True, default=0, null=True)),
                ('created_on', models.DateTimeField(auto_now_add=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='TmdbApi',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('key', models.CharField(default='', max_length=255, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='Video',
            fields=[
                ('key', models.CharField(max_length=255, primary_key=True, serialize=False)),
                ('name', models.CharField(blank=True, max_length=255, null=True)),
                ('site', models.CharField(blank=True, max_length=255, null=True)),
                ('movie', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='videos', to='app.movie')),
                ('serie', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='videos', to='app.serie')),
            ],
        ),
        migrations.CreateModel(
            name='UpcomingSerie',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('enabled', models.BooleanField(default=True)),
                ('source', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='upconing_series', to='app.serie')),
            ],
        ),
        migrations.CreateModel(
            name='UpcomingMovie',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('enabled', models.BooleanField(default=True)),
                ('source', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='upconing_movies', to='app.movie')),
            ],
        ),
        migrations.CreateModel(
            name='TopRatedSerie',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('enabled', models.BooleanField(default=True)),
                ('source', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='top_rated_series', to='app.serie')),
            ],
        ),
        migrations.CreateModel(
            name='TopRatedMovie',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('enabled', models.BooleanField(default=True)),
                ('source', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='top_rated_movies', to='app.movie')),
            ],
        ),
        migrations.CreateModel(
            name='Season',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('source_link', models.CharField(blank=True, max_length=512, null=True)),
                ('release_date', models.DateField(blank=True, null=True)),
                ('name', models.CharField(blank=True, max_length=255, null=True)),
                ('overview', models.TextField(blank=True, null=True)),
                ('poster_path', models.CharField(blank=True, max_length=255, null=True)),
                ('season_number', models.IntegerField(blank=True, default=0, null=True)),
                ('episode_count', models.IntegerField(blank=True, default=0, null=True)),
                ('created_on', models.DateTimeField(auto_now_add=True, null=True)),
                ('serie', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='seasons', to='app.serie')),
            ],
        ),
        migrations.CreateModel(
            name='PopularSerie',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('enabled', models.BooleanField(default=True)),
                ('source', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='popular_series', to='app.serie')),
            ],
        ),
        migrations.CreateModel(
            name='PopularMovie',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('enabled', models.BooleanField(default=True)),
                ('source', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='popular_movies', to='app.movie')),
            ],
        ),
        migrations.CreateModel(
            name='OtherTitle',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(blank=True, max_length=255, null=True)),
                ('movie', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='other_titles', to='app.movie')),
                ('serie', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='other_titles', to='app.serie')),
            ],
        ),
        migrations.CreateModel(
            name='Link',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('embed_link', models.CharField(blank=True, max_length=512, null=True)),
                ('version', models.CharField(blank=True, choices=[('VF', 'VF'), ('VOSTFR', 'VOSTFR')], max_length=255, null=True)),
                ('created_on', models.DateTimeField(auto_now_add=True, null=True)),
                ('episode', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='links', to='app.episode')),
                ('movie', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='links', to='app.movie')),
            ],
        ),
        migrations.CreateModel(
            name='Keyword',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=255, null=True)),
                ('movie', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='keywords', to='app.movie')),
                ('serie', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='keywords', to='app.serie')),
            ],
        ),
        migrations.CreateModel(
            name='Genre',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100)),
                ('movies', models.ManyToManyField(blank=True, related_name='genres', to='app.movie')),
                ('series', models.ManyToManyField(blank=True, related_name='genres', to='app.serie')),
            ],
        ),
        migrations.AddField(
            model_name='episode',
            name='season',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='episodes', to='app.season'),
        ),
        migrations.CreateModel(
            name='Director',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('movies', models.ManyToManyField(blank=True, related_name='directors', to='app.movie')),
                ('person', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.person')),
                ('series', models.ManyToManyField(blank=True, related_name='directors', to='app.serie')),
            ],
        ),
        migrations.CreateModel(
            name='Cast',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('character', models.CharField(blank=True, max_length=255, null=True)),
                ('movies', models.ManyToManyField(blank=True, related_name='casts', to='app.movie')),
                ('person', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='roles', to='app.person')),
                ('series', models.ManyToManyField(blank=True, related_name='casts', to='app.serie')),
            ],
        ),
    ]
